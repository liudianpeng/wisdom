(function(b){var a={series:{curvedLines:{active:false,apply:false,monotonicFit:false,tension:0.5,nrSplinePoints:20,legacyOverride:undefined}}};function c(j){j.hooks.processOptions.push(k);function k(m,l){if(l.series.curvedLines.active){m.hooks.processDatapoints.unshift(g)}}function g(s,r,t){var m=t.points.length/t.pointsize;var n=0.005;var v=f(r.curvedLines);if(!v&&r.curvedLines.apply==true&&r.originSeries===undefined&&m>(1+n)){if(r.lines.fill){var w=d(t,r.curvedLines,1);var u=d(t,r.curvedLines,2);t.pointsize=3;t.points=[];var p=0;var o=0;var q=0;var l=2;while(q<w.length||p<u.length){if(w[q]==u[p]){t.points[o]=w[q];t.points[o+1]=w[q+1];t.points[o+2]=u[p+1];p+=l;q+=l}else{if(w[q]<u[p]){t.points[o]=w[q];t.points[o+1]=w[q+1];t.points[o+2]=o>0?t.points[o-1]:null;q+=l}else{t.points[o]=u[p];t.points[o+1]=o>1?t.points[o-2]:null;t.points[o+2]=u[p+1];p+=l}}o+=3}}else{if(r.lines.lineWidth>0){t.points=d(t,r.curvedLines,1);t.pointsize=2}}}}function d(p,n,o){if(typeof n.legacyOverride!="undefined"&&n.legacyOverride!=false){var m={fit:false,curvePointFactor:20,fitPointDist:undefined};var l=jQuery.extend(m,n.legacyOverride);return i(p,l,o)}return e(p,n,o)}function e(t,z,q){var y=t.points;var l=t.pointsize;var w=h(t,z,q);var A=[];var r=0;for(var s=0;s<y.length-l;s+=l){var p=s;var n=s+q;var u=y[p];var m=y[p+l];var o=(m-u)/Number(z.nrSplinePoints);A.push(y[p]);A.push(y[n]);for(var v=(u+=o);v<m;v+=o){A.push(v);A.push(w[r](v))}r++}A.push(y[y.length-l]);A.push(y[y.length-l+q]);return A}function h(l,I,z){var D=l.points;var B=l.pointsize;var p=[];var F=[];for(var E=0;E<D.length-B;E+=B){var u=E;var t=E+z;var x=D[u+B]-D[u];var w=D[t+B]-D[t];p.push(x);F.push(w/x)}var A=[F[0]];if(I.monotonicFit){for(var E=1;E<p.length;E++){var v=F[E];var J=F[E-1];if(v*J<=0){A.push(0)}else{var q=p[E];var o=p[E-1];var y=q+o;A.push(3*y/((y+q)/J+(y+o)/v))}}}else{for(var E=B;E<D.length-B;E+=B){var u=E;var t=E+z;A.push(Number(I.tension)*(D[t+B]-D[t-B])/(D[u+B]-D[u-B]))}}A.push(F[F.length-1]);var n=[];var m=[];for(E=0;E<p.length;E++){var s=A[E];var r=A[E+1];var v=F[E];var G=1/p[E];var y=s+r-v-v;n.push(y*G*G);m.push((v-y-s)*G)}var H=[];for(var E=0;E<p.length;E++){var C=function(N,K,O,M,L){return function(P){var R=P-N;var Q=R*R;return K*R*Q+O*Q+M*R+L}};H.push(C(D[E*B],n[E],m[E],A[E],D[E*B+z]))}return H}function i(m,V,C){var L=m.points;var F=m.pointsize;var t=Number(V.curvePointFactor)*(L.length/F);var l=new Array;var D=new Array;var v=-1;var u=-1;var J=0;if(V.fit){var x;if(typeof V.fitPointDist=="undefined"){var R=L[0];var Q=L[L.length-F];x=(Q-R)/(500*100)}else{x=Number(V.fitPointDist)}for(var M=0;M<L.length;M+=F){var O;var q;v=M;u=M+C;O=L[v]-x;q=L[v]+x;var A=2;while(O==L[v]||q==L[v]){O=L[v]-(x*A);q=L[v]+(x*A);A++}l[J]=O;D[J]=L[u];J++;l[J]=L[v];D[J]=L[u];J++;l[J]=q;D[J]=L[u];J++}}else{for(var M=0;M<L.length;M+=F){v=M;u=M+C;l[J]=L[v];D[J]=L[u];J++}}var E=l.length;var o=new Array();var T=new Array();o[0]=0;o[E-1]=0;T[0]=0;for(var M=1;M<E-1;++M){var P=(l[M+1]-l[M-1]);if(P==0){return[]}var y=(l[M]-l[M-1])/P;var B=y*o[M-1]+2;o[M]=(y-1)/B;T[M]=(D[M+1]-D[M])/(l[M+1]-l[M])-(D[M]-D[M-1])/(l[M]-l[M-1]);T[M]=(6*T[M]/(l[M+1]-l[M-1])-y*T[M-1])/B}for(var J=E-2;J>=0;--J){o[J]=o[J]*o[J+1]+T[J]}var r=(l[E-1]-l[0])/(t-1);var z=new Array;var I=new Array;var w=new Array;z[0]=l[0];I[0]=D[0];w.push(z[0]);w.push(I[0]);for(J=1;J<t;++J){z[J]=z[0]+J*r;var K=E-1;var G=0;while(K-G>1){var H=Math.round((K+G)/2);if(l[H]>z[J]){K=H}else{G=H}}var N=(l[K]-l[G]);if(N==0){return[]}var U=(l[K]-z[J])/N;var S=(z[J]-l[G])/N;I[J]=U*D[G]+S*D[K]+((U*U*U-U)*o[G]+(S*S*S-S)*o[K])*(N*N)/6;w.push(z[J]);w.push(I[J])}return w}function f(l){if(typeof l.fit!="undefined"||typeof l.curvePointFactor!="undefined"||typeof l.fitPointDist!="undefined"){throw new Error("CurvedLines detected illegal parameters. The CurvedLines API changed with version 1.0.0 please check the options object.");return true}return false}}b.plot.plugins.push({init:c,options:a,name:"curvedLines",version:"1.1.1"})})(jQuery);