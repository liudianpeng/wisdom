describe("Test the radial linear scale",function(){var a;beforeEach(function(){window.addDefaultMatchers(jasmine)});afterEach(function(){if(a){releaseChart(a)}});it("Should register the constructor with the scale service",function(){var b=Chart.scaleService.getScaleConstructor("radialLinear");expect(b).not.toBe(undefined);expect(typeof b).toBe("function")});it("Should have the correct default config",function(){var b=Chart.scaleService.getScaleDefaults("radialLinear");expect(b).toEqual({angleLines:{display:true,color:"rgba(0, 0, 0, 0.1)",lineWidth:1},animate:true,display:true,gridLines:{color:"rgba(0, 0, 0, 0.1)",drawBorder:true,drawOnChartArea:true,drawTicks:true,tickMarkLength:10,lineWidth:1,offsetGridLines:false,display:true,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineWidth:1,},lineArc:false,pointLabels:{fontSize:10,callback:b.pointLabels.callback,},position:"chartArea",scaleLabel:{labelString:"",display:false,},ticks:{backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,beginAtZero:false,minRotation:0,maxRotation:50,mirror:false,padding:10,reverse:false,showLabelBackdrop:true,display:true,callback:b.ticks.callback,autoSkip:true,autoSkipPadding:0,labelOffset:0},});expect(b.ticks.callback).toEqual(jasmine.any(Function));expect(b.pointLabels.callback).toEqual(jasmine.any(Function))});it("Should correctly determine the max & min data values",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[10,5,0,-5,78,-100]},{data:[150]}],labels:["lablel1","label2","label3","label4","label5","label6"]},options:{scales:{}}});expect(a.scale.min).toBe(-100);expect(a.scale.max).toBe(150)});it("Should correctly determine the max & min of string data values",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:["10","5","0","-5","78","-100"]},{data:["150"]}],labels:["lablel1","label2","label3","label4","label5","label6"]},options:{scales:{}}});expect(a.scale.min).toBe(-100);expect(a.scale.max).toBe(150)});it("Should correctly determine the max & min data values when there are hidden datasets",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:["10","5","0","-5","78","-100"]},{data:["150"]},{data:[1000],hidden:true}],labels:["lablel1","label2","label3","label4","label5","label6"]},options:{scales:{}}});expect(a.scale.min).toBe(-100);expect(a.scale.max).toBe(150)});it("Should correctly determine the max & min data values when there is NaN data",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[50,60,NaN,70,null,undefined]}],labels:["lablel1","label2","label3","label4","label5","label6"]},options:{scales:{}}});expect(a.scale.min).toBe(50);expect(a.scale.max).toBe(70)});it("Should ensure that the scale has a max and min that are not equal",function(){var b="myScale";var d={datasets:[],labels:[]};var c=window.createMockContext();var f=Chart.scaleService.getScaleConstructor("radialLinear");var e=new f({ctx:c,options:Chart.scaleService.getScaleDefaults("radialLinear"),chart:{data:d},id:b,});e.update(200,300);expect(e.min).toBe(-1);expect(e.max).toBe(1)});it("Should use the suggestedMin and suggestedMax options",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[1,1,1,2,1,0]}],labels:["lablel1","label2","label3","label4","label5","label6"]},options:{scale:{ticks:{suggestedMin:-10,suggestedMax:10}}}});expect(a.scale.min).toBe(-10);expect(a.scale.max).toBe(10)});it("Should use the min and max options",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[1,1,1,2,1,0]}],labels:["lablel1","label2","label3","label4","label5","label6"]},options:{scale:{ticks:{min:-1010,max:1010}}}});expect(a.scale.min).toBe(-1010);expect(a.scale.max).toBe(1010);expect(a.scale.ticks).toEqual(["-1010","-1000","-500","0","500","1000","1010"])});it("should forcibly include 0 in the range if the beginAtZero option is used",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[20,30,40,50]}],labels:["lablel1","label2","label3","label4"]},options:{scale:{ticks:{beginAtZero:false}}}});expect(a.scale.ticks).toEqual(["20","25","30","35","40","45","50"]);a.scale.options.ticks.beginAtZero=true;a.update();expect(a.scale.ticks).toEqual(["0","5","10","15","20","25","30","35","40","45","50"]);a.data.datasets[0].data=[-20,-30,-40,-50];a.update();expect(a.scale.ticks).toEqual(["-50","-45","-40","-35","-30","-25","-20","-15","-10","-5","0"]);a.scale.options.ticks.beginAtZero=false;a.update();expect(a.scale.ticks).toEqual(["-50","-45","-40","-35","-30","-25","-20"])});it("Should generate tick marks in the correct order in reversed mode",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[10,5,0,25,78]}],labels:["lablel1","label2","label3","label4","label5"]},options:{scale:{ticks:{reverse:true}}}});expect(a.scale.ticks).toEqual(["80","70","60","50","40","30","20","10","0"]);expect(a.scale.start).toBe(80);expect(a.scale.end).toBe(0)});it("Should build labels using the user supplied callback",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[10,5,0,25,78]}],labels:["label1","label2","label3","label4","label5"]},options:{scale:{ticks:{callback:function(c,b){return b.toString()}}}}});expect(a.scale.ticks).toEqual(["0","1","2","3","4","5","6","7","8"]);expect(a.scale.pointLabels).toEqual(["label1","label2","label3","label4","label5"])});it("Should build point labels using the user supplied callback",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[10,5,0,25,78]}],labels:["label1","label2","label3","label4","label5"]},options:{scale:{pointLabels:{callback:function(c,b){return b.toString()}}}}});expect(a.scale.pointLabels).toEqual(["0","1","2","3","4"])});it("should correctly set the center point",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[10,5,0,25,78]}],labels:["label1","label2","label3","label4","label5"]},options:{scale:{pointLabels:{callback:function(c,b){return b.toString()}}}}});expect(a.scale.drawingArea).toBe(225);expect(a.scale.xCenter).toBe(256);expect(a.scale.yCenter).toBe(272)});it("should correctly get the label for a given data index",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[10,5,0,25,78]}],labels:["label1","label2","label3","label4","label5"]},options:{scale:{pointLabels:{callback:function(c,b){return b.toString()}}}}});expect(a.scale.getLabelForIndex(1,0)).toBe(5)});it("should get the correct distance from the center point",function(){a=window.acquireChart({type:"radar",data:{datasets:[{data:[10,5,0,25,78]}],labels:["label1","label2","label3","label4","label5"]},options:{scale:{pointLabels:{callback:function(c,b){return b.toString()}}}}});expect(a.scale.getDistanceFromCenterForValue(a.scale.min)).toBe(0);expect(a.scale.getDistanceFromCenterForValue(a.scale.max)).toBe(225);expect(a.scale.getPointPositionForValue(1,5)).toEqual({x:269,y:268,});a.scale.options.reverse=true;a.update();expect(a.scale.getDistanceFromCenterForValue(a.scale.min)).toBe(225);expect(a.scale.getDistanceFromCenterForValue(a.scale.max)).toBe(0)})});