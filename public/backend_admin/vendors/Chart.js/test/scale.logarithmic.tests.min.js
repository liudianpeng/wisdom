describe("Logarithmic Scale tests",function(){beforeEach(function(){window.addDefaultMatchers(jasmine)});afterEach(function(){window.releaseAllCharts()});it("should register the constructor with the scale service",function(){var a=Chart.scaleService.getScaleConstructor("logarithmic");expect(a).not.toBe(undefined);expect(typeof a).toBe("function")});it("should have the correct default config",function(){var a=Chart.scaleService.getScaleDefaults("logarithmic");expect(a).toEqual({display:true,gridLines:{color:"rgba(0, 0, 0, 0.1)",drawBorder:true,drawOnChartArea:true,drawTicks:true,tickMarkLength:10,lineWidth:1,offsetGridLines:false,display:true,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineWidth:1,},position:"left",scaleLabel:{labelString:"",display:false,},ticks:{beginAtZero:false,minRotation:0,maxRotation:50,mirror:false,padding:10,reverse:false,display:true,callback:a.ticks.callback,autoSkip:true,autoSkipPadding:0,labelOffset:0},});expect(a.ticks.callback).toEqual(jasmine.any(Function))});it("should correctly determine the max & min data values",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{yAxisID:"yScale0",data:[42,1000,64,100],},{yAxisID:"yScale1",data:[10,5,5000,78,450]},{yAxisID:"yScale1",data:[150]}],labels:["a","b","c","d","e"]},options:{scales:{yAxes:[{id:"yScale0",type:"logarithmic"},{id:"yScale1",type:"logarithmic"}]}}});expect(a.scales.yScale0).not.toEqual(undefined);expect(a.scales.yScale0.min).toBe(10);expect(a.scales.yScale0.max).toBe(1000);expect(a.scales.yScale1).not.toEqual(undefined);expect(a.scales.yScale1.min).toBe(1);expect(a.scales.yScale1.max).toBe(5000)});it("should correctly determine the max & min of string data values",function(){var a=window.acquireChart({type:"line",data:{datasets:[{yAxisID:"yScale0",data:["42","1000","64","100"],},{yAxisID:"yScale1",data:["10","5","5000","78","450"]},{yAxisID:"yScale1",data:["150"]}],labels:["a","b","c","d","e"]},options:{scales:{yAxes:[{id:"yScale0",type:"logarithmic"},{id:"yScale1",type:"logarithmic"}]}}});expect(a.scales.yScale0).not.toEqual(undefined);expect(a.scales.yScale0.min).toBe(10);expect(a.scales.yScale0.max).toBe(1000);expect(a.scales.yScale1).not.toEqual(undefined);expect(a.scales.yScale1.min).toBe(1);expect(a.scales.yScale1.max).toBe(5000)});it("should correctly determine the max & min data values when there are hidden datasets",function(){var a=window.acquireChart({type:"line",data:{datasets:[{yAxisID:"yScale1",data:[10,5,5000,78,450]},{yAxisID:"yScale0",data:[42,1000,64,100],},{yAxisID:"yScale1",data:[50000],hidden:true}],labels:["a","b","c","d","e"]},options:{scales:{yAxes:[{id:"yScale0",type:"logarithmic"},{id:"yScale1",type:"logarithmic"}]}}});expect(a.scales.yScale1).not.toEqual(undefined);expect(a.scales.yScale1.min).toBe(1);expect(a.scales.yScale1.max).toBe(5000)});it("should correctly determine the max & min data values when there is NaN data",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[undefined,10,null,5,5000,NaN,78,450]},{data:[undefined,28,null,1000,500,NaN,50,42]}],labels:["a","b","c","d","e","f","g"]},options:{scales:{yAxes:[{id:"yScale",type:"logarithmic"}]}}});expect(a.scales.yScale).not.toEqual(undefined);expect(a.scales.yScale.min).toBe(1);expect(a.scales.yScale.max).toBe(5000);a.options.scales.yAxes[0].stacked=true;a.update();expect(a.scales.yScale.min).toBe(10);expect(a.scales.yScale.max).toBe(6000)});it("should correctly determine the max & min for scatter data",function(){var a=window.acquireChart({type:"line",data:{datasets:[{data:[{x:10,y:100},{x:2,y:6},{x:65,y:121},{x:99,y:7}]}]},options:{scales:{xAxes:[{id:"xScale",type:"logarithmic",position:"bottom"}],yAxes:[{id:"yScale",type:"logarithmic"}]}}});expect(a.scales.xScale.min).toBe(1);expect(a.scales.xScale.max).toBe(100);expect(a.scales.yScale.min).toBe(1);expect(a.scales.yScale.max).toBe(200)});it("should correctly determine the min and max data values when stacked mode is turned on",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{type:"bar",yAxisID:"yScale0",data:[10,5,1,5,78,100]},{yAxisID:"yScale1",data:[-1000,1000],},{type:"bar",yAxisID:"yScale0",data:[150,10,10,100,10,9]},{type:"line",yAxisID:"yScale0",data:[100,100,100,100,100,100]}],labels:["a","b","c","d","e","f"]},options:{scales:{yAxes:[{id:"yScale0",type:"logarithmic",stacked:true},{id:"yScale1",type:"logarithmic"}]}}});expect(a.scales.yScale0.min).toBe(10);expect(a.scales.yScale0.max).toBe(200)});it("should correctly determine the min and max data values when stacked mode is turned on ignoring hidden datasets",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{yAxisID:"yScale0",data:[10,5,1,5,78,100],type:"bar"},{yAxisID:"yScale1",data:[-1000,1000],type:"bar"},{yAxisID:"yScale0",data:[150,10,10,100,10,9],type:"bar"},{yAxisID:"yScale0",data:[10000,10000,10000,10000,10000,10000],hidden:true,type:"bar"}],labels:["a","b","c","d","e","f"]},options:{scales:{yAxes:[{id:"yScale0",type:"logarithmic",stacked:true},{id:"yScale1",type:"logarithmic"}]}}});expect(a.scales.yScale0.min).toBe(10);expect(a.scales.yScale0.max).toBe(200)});it("should ensure that the scale has a max and min that are not equal",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[]}],labels:[]},options:{scales:{yAxes:[{id:"yScale",type:"logarithmic"}]}}});expect(a.scales.yScale.min).toBe(1);expect(a.scales.yScale.max).toBe(10);a.data.datasets[0].data=[0.15,0.15];a.update();expect(a.scales.yScale.min).toBe(0.01);expect(a.scales.yScale.max).toBe(1)});it("should use the min and max options",function(){var b=window.acquireChart({type:"bar",data:{datasets:[{data:[1,1,1,2,1,0]}],labels:[]},options:{scales:{yAxes:[{id:"yScale",type:"logarithmic",ticks:{min:10,max:1010,callback:function(d){return d}}}]}}});var c=b.scales.yScale;var a=c.ticks.length;expect(c.min).toBe(10);expect(c.max).toBe(1010);expect(c.ticks[0]).toBe(1010);expect(c.ticks[a-1]).toBe(10)});it("should generate tick marks",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[10,5,1,25,78]}],labels:[]},options:{scales:{yAxes:[{id:"yScale",type:"logarithmic",ticks:{callback:function(b){return b}}}]}}});expect(a.scales.yScale).toEqual(jasmine.objectContaining({ticks:[80,70,60,50,40,30,20,10,9,8,7,6,5,4,3,2,1],start:1,end:80}))});it("should generate tick marks in the correct order in reversed mode",function(){var a=window.acquireChart({type:"line",data:{datasets:[{data:[10,5,1,25,78]}],labels:[]},options:{scales:{yAxes:[{id:"yScale",type:"logarithmic",ticks:{reverse:true,callback:function(b){return b}}}]}}});expect(a.scales.yScale).toEqual(jasmine.objectContaining({ticks:[1,2,3,4,5,6,7,8,9,10,20,30,40,50,60,70,80],start:80,end:1}))});it("should build labels using the default template",function(){var a=window.acquireChart({type:"line",data:{datasets:[{data:[10,5,1,25,78]}],labels:[]},options:{scales:{yAxes:[{id:"yScale",type:"logarithmic"}]}}});expect(a.scales.yScale.ticks).toEqual(["8e+1","","","5e+1","","","2e+1","1e+1","","","","","5e+0","","","2e+0","1e+0"])});it("should build labels using the user supplied callback",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[10,5,1,25,78]}],labels:[]},options:{scales:{yAxes:[{id:"yScale",type:"logarithmic",ticks:{callback:function(c,b){return b.toString()}}}]}}});expect(a.scales.yScale.ticks).toEqual(["0","1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16"])});it("should correctly get the correct label for a data item",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{yAxisID:"yScale0",data:[10,5,5000,78,450]},{yAxisID:"yScale1",data:[1,1000,10,100],},{yAxisID:"yScale0",data:[150]}],labels:[]},options:{scales:{yAxes:[{id:"yScale0",type:"logarithmic"},{id:"yScale1",type:"logarithmic"}]}}});expect(a.scales.yScale1.getLabelForIndex(0,2)).toBe(150)});it("should get the correct pixel value for a point",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{xAxisID:"xScale",yAxisID:"yScale",data:[10,5,1,25,78]}],labels:[]},options:{scales:{yAxes:[{id:"xScale",type:"logarithmic",position:"bottom"},{id:"yScale",type:"logarithmic"}]}}});var c=a.scales.xScale;expect(c.getPixelForValue(80,0,0)).toBeCloseToPixel(495);expect(c.getPixelForValue(1,0,0)).toBeCloseToPixel(48);expect(c.getPixelForValue(10,0,0)).toBeCloseToPixel(283);expect(c.getPixelForValue(0,0,0)).toBeCloseToPixel(48);expect(c.getValueForPixel(495)).toBeCloseTo(80,0.0001);expect(c.getValueForPixel(48)).toBeCloseTo(1,0.0001);expect(c.getValueForPixel(283)).toBeCloseTo(10,0.0001);var b=a.scales.yScale;expect(b.getPixelForValue(80,0,0)).toBeCloseToPixel(32);expect(b.getPixelForValue(1,0,0)).toBeCloseToPixel(456);expect(b.getPixelForValue(10,0,0)).toBeCloseToPixel(234);expect(b.getPixelForValue(0,0,0)).toBeCloseToPixel(32);expect(b.getValueForPixel(32)).toBeCloseTo(80,0.0001);expect(b.getValueForPixel(456)).toBeCloseTo(1,0.0001);expect(b.getValueForPixel(234)).toBeCloseTo(10,0.0001)})});