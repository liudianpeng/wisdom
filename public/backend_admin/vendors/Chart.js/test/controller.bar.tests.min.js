describe("Bar controller tests",function(){beforeEach(function(){window.addDefaultMatchers(jasmine)});afterEach(function(){window.releaseAllCharts()});it("should be constructed",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[]},{data:[]}],labels:[]}});var b=a.getDatasetMeta(1);expect(b.type).toEqual("bar");expect(b.data).toEqual([]);expect(b.hidden).toBe(null);expect(b.controller).not.toBe(undefined);expect(b.controller.index).toBe(1);expect(b.xAxisID).not.toBe(null);expect(b.yAxisID).not.toBe(null);b.controller.updateIndex(0);expect(b.controller.index).toBe(0)});it("should use the first scale IDs if the dataset does not specify them",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[]},{data:[]}],labels:[]},options:{scales:{xAxes:[{id:"firstXScaleID"}],yAxes:[{id:"firstYScaleID"}]}}});var b=a.getDatasetMeta(1);expect(b.xAxisID).toBe("firstXScaleID");expect(b.yAxisID).toBe("firstYScaleID")});it("should correctly count the number of bar datasets",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[],type:"line"},{data:[],hidden:true},{data:[]},{data:[]}],labels:[]}});var b=a.getDatasetMeta(1);expect(b.controller.getBarCount()).toBe(2)});it("should correctly get the bar index accounting for hidden datasets",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[]},{data:[],hidden:true},{data:[],type:"line"},{data:[]}],labels:[]}});var b=a.getDatasetMeta(1);expect(b.controller.getBarIndex(0)).toBe(0);expect(b.controller.getBarIndex(3)).toBe(1)});it("should create rectangle elements for each data item during initialization",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[]},{data:[10,15,0,-4]}],labels:[]}});var b=a.getDatasetMeta(1);expect(b.data.length).toBe(4);expect(b.data[0] instanceof Chart.elements.Rectangle).toBe(true);expect(b.data[1] instanceof Chart.elements.Rectangle).toBe(true);expect(b.data[2] instanceof Chart.elements.Rectangle).toBe(true);expect(b.data[3] instanceof Chart.elements.Rectangle).toBe(true)});it("should update elements when modifying data",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[1,2],label:"dataset1"},{data:[10,15,0,-4],label:"dataset2",borderColor:"blue"}],labels:["label1","label2","label3","label4"]},options:{elements:{rectangle:{backgroundColor:"red",borderSkipped:"top",borderColor:"green",borderWidth:2,}},scales:{xAxes:[{id:"firstXScaleID",type:"category"}],yAxes:[{id:"firstYScaleID",type:"linear"}]}}});var b=a.getDatasetMeta(1);expect(b.data.length).toBe(4);a.data.datasets[1].data=[1,2];a.data.datasets[1].borderWidth=1;a.update();expect(b.data.length).toBe(2);[{x:122,y:484},{x:234,y:32}].forEach(function(d,c){expect(b.data[c]._datasetIndex).toBe(1);expect(b.data[c]._index).toBe(c);expect(b.data[c]._xScale).toBe(a.scales.firstXScaleID);expect(b.data[c]._yScale).toBe(a.scales.firstYScaleID);expect(b.data[c]._model.x).toBeCloseToPixel(d.x);expect(b.data[c]._model.y).toBeCloseToPixel(d.y);expect(b.data[c]._model.base).toBeCloseToPixel(484);expect(b.data[c]._model.width).toBeCloseToPixel(40);expect(b.data[c]._model).toEqual(jasmine.objectContaining({datasetLabel:a.config.data.datasets[1].label,label:a.config.data.labels[c],backgroundColor:"red",borderSkipped:"top",borderColor:"blue",borderWidth:1}))});a.data.datasets[1].data=[1,2,3];a.update();expect(b.data.length).toBe(3)});it("should get the correct bar points when datasets of different types exist",function(){var c=window.acquireChart({type:"bar",data:{datasets:[{data:[1,2],label:"dataset1"},{type:"line",data:[4,6],label:"dataset2"},{data:[8,10],label:"dataset3"}],labels:["label1","label2"]},options:{scales:{xAxes:[{type:"category"}],yAxes:[{type:"linear"}]}}});var d=c.getDatasetMeta(2);expect(d.data.length).toBe(2);var b=d.data[0];var a=d.data[1];expect(b._model.x).toBeCloseToPixel(194);expect(b._model.y).toBeCloseToPixel(132);expect(a._model.x).toBeCloseToPixel(424);expect(a._model.y).toBeCloseToPixel(32)});it("should update elements when the scales are stacked",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[10,-10,10,-10],label:"dataset1"},{data:[10,15,0,-4],label:"dataset2"}],labels:["label1","label2","label3","label4"]},options:{scales:{xAxes:[{type:"category",stacked:true}],yAxes:[{type:"linear",stacked:true}]}}});var c=a.getDatasetMeta(0);[{b:290,w:91,x:95,y:161},{b:290,w:91,x:209,y:419},{b:290,w:91,x:322,y:161},{b:290,w:91,x:436,y:419}].forEach(function(d,e){expect(c.data[e]._model.base).toBeCloseToPixel(d.b);expect(c.data[e]._model.width).toBeCloseToPixel(d.w);expect(c.data[e]._model.x).toBeCloseToPixel(d.x);expect(c.data[e]._model.y).toBeCloseToPixel(d.y)});var b=a.getDatasetMeta(1);[{b:161,w:91,x:95,y:32},{b:290,w:91,x:209,y:97},{b:161,w:91,x:322,y:161},{b:419,w:91,x:436,y:471}].forEach(function(d,e){expect(b.data[e]._model.base).toBeCloseToPixel(d.b);expect(b.data[e]._model.width).toBeCloseToPixel(d.w);expect(b.data[e]._model.x).toBeCloseToPixel(d.x);expect(b.data[e]._model.y).toBeCloseToPixel(d.y)})});it("should draw all bars",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[],},{data:[10,15,0,-4],label:"dataset2"}],labels:["label1","label2","label3","label4"]}});var b=a.getDatasetMeta(1);spyOn(b.data[0],"draw");spyOn(b.data[1],"draw");spyOn(b.data[2],"draw");spyOn(b.data[3],"draw");a.update();expect(b.data[0].draw.calls.count()).toBe(1);expect(b.data[1].draw.calls.count()).toBe(1);expect(b.data[2].draw.calls.count()).toBe(1);expect(b.data[3].draw.calls.count()).toBe(1)});it("should set hover styles on rectangles",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[],},{data:[10,15,0,-4],label:"dataset2"}],labels:["label1","label2","label3","label4"]},options:{elements:{rectangle:{backgroundColor:"rgb(255, 0, 0)",borderColor:"rgb(0, 0, 255)",borderWidth:2,}}}});var c=a.getDatasetMeta(1);var b=c.data[0];c.controller.setHoverStyle(b);expect(b._model.backgroundColor).toBe("rgb(230, 0, 0)");expect(b._model.borderColor).toBe("rgb(0, 0, 230)");expect(b._model.borderWidth).toBe(2);a.data.datasets[1].hoverBackgroundColor="rgb(128, 128, 128)";a.data.datasets[1].hoverBorderColor="rgb(0, 0, 0)";a.data.datasets[1].hoverBorderWidth=5;c.controller.setHoverStyle(b);expect(b._model.backgroundColor).toBe("rgb(128, 128, 128)");expect(b._model.borderColor).toBe("rgb(0, 0, 0)");expect(b._model.borderWidth).toBe(5);a.data.datasets[1].hoverBackgroundColor=["rgb(255, 255, 255)","rgb(128, 128, 128)"];a.data.datasets[1].hoverBorderColor=["rgb(9, 9, 9)","rgb(0, 0, 0)"];a.data.datasets[1].hoverBorderWidth=[2.5,5];c.controller.setHoverStyle(b);expect(b._model.backgroundColor).toBe("rgb(255, 255, 255)");expect(b._model.borderColor).toBe("rgb(9, 9, 9)");expect(b._model.borderWidth).toBe(2.5);b.custom={hoverBackgroundColor:"rgb(255, 0, 0)",hoverBorderColor:"rgb(0, 255, 0)",hoverBorderWidth:1.5};c.controller.setHoverStyle(b);expect(b._model.backgroundColor).toBe("rgb(255, 0, 0)");expect(b._model.borderColor).toBe("rgb(0, 255, 0)");expect(b._model.borderWidth).toBe(1.5)});it("should remove a hover style from a bar",function(){var a=window.acquireChart({type:"bar",data:{datasets:[{data:[],},{data:[10,15,0,-4],label:"dataset2"}],labels:["label1","label2","label3","label4"]},options:{elements:{rectangle:{backgroundColor:"rgb(255, 0, 0)",borderColor:"rgb(0, 0, 255)",borderWidth:2,}}}});var c=a.getDatasetMeta(1);var b=c.data[0];a.options.elements.rectangle.backgroundColor="rgb(128, 128, 128)";a.options.elements.rectangle.borderColor="rgb(15, 15, 15)";a.options.elements.rectangle.borderWidth=3.14;c.controller.removeHoverStyle(b);expect(b._model.backgroundColor).toBe("rgb(128, 128, 128)");expect(b._model.borderColor).toBe("rgb(15, 15, 15)");expect(b._model.borderWidth).toBe(3.14);a.data.datasets[1].backgroundColor=["rgb(255, 255, 255)","rgb(128, 128, 128)"];a.data.datasets[1].borderColor=["rgb(9, 9, 9)","rgb(0, 0, 0)"];a.data.datasets[1].borderWidth=[2.5,5];c.controller.removeHoverStyle(b);expect(b._model.backgroundColor).toBe("rgb(255, 255, 255)");expect(b._model.borderColor).toBe("rgb(9, 9, 9)");expect(b._model.borderWidth).toBe(2.5);b.custom={backgroundColor:"rgb(255, 0, 0)",borderColor:"rgb(0, 255, 0)",borderWidth:1.5};c.controller.removeHoverStyle(b);expect(b._model.backgroundColor).toBe("rgb(255, 0, 0)");expect(b._model.borderColor).toBe("rgb(0, 255, 0)");expect(b._model.borderWidth).toBe(1.5)})});