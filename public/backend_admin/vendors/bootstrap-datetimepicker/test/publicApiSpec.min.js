describe("Plugin initialization and component basic construction",function(){it("loads jquery plugin properly",function(){expect($("<div>").datetimepicker).toBeDefined();expect(typeof $("<div>").datetimepicker).toEqual("function");expect($("<div>").datetimepicker.defaults).toBeDefined()});it("creates the component with default options on an input element",function(){var b=$("<input>"),a;$(document).find("body").append(b);expect(function(){expect(b.datetimepicker()).toBe(b)}).not.toThrow();a=b.data("DateTimePicker");expect(b).not.toBe(null)});it("creates the component with default options merged with those provided on an input element",function(){var a={locale:"fr"},c=$("<input>"),b;$(document).find("body").append(c);expect(function(){expect(c.datetimepicker(a)).toBe(c)}).not.toThrow();b=c.data("DateTimePicker");expect(b).not.toBe(null);expect(b.options()).toEqual($.extend(true,{},c.datetimepicker.defaults,a))});it("does not accept non-object or string types",function(){var a=$("<input>");$(document).find("body").append(a);expect(function(){a.datetimepicker(true)}).toThrow()});xit("calls destroy when Element that the component is attached is removed",function(){var b=$("<div>").attr("class","row").append($("<div>").attr("class","col-md-12").append($("<input>"))),a;$(document).find("body").append(b);b.datetimepicker();a=b.data("DateTimePicker");spyOn(a,"destroy").and.callThrough();b.remove();expect(a.destroy).toHaveBeenCalled()})});describe("Public API method tests",function(){var d,e,f,b,a,g,c;beforeEach(function(){f=jasmine.createSpy("dp.change event Spy");b=jasmine.createSpy("dp.show event Spy");a=jasmine.createSpy("dp.hide event Spy");g=jasmine.createSpy("dp.error event Spy");c=jasmine.createSpy("dp.classify event Spy");e=$("<input>").attr("id","dtp");$(document).find("body").append($("<div>").attr("class","row").append($("<div>").attr("class","col-md-12").append(e)));$(document).find("body").on("dp.change",f);$(document).find("body").on("dp.show",b);$(document).find("body").on("dp.hide",a);$(document).find("body").on("dp.error",g);$(document).find("body").on("dp.classify",c);e.datetimepicker();d=e.data("DateTimePicker")});afterEach(function(){d.destroy();e.remove()});describe("configuration option name match to public api function",function(){Object.getOwnPropertyNames($.fn.datetimepicker.defaults).forEach(function(h){it("has function "+h+"()",function(){expect(d[h]).toBeDefined()})})});describe("unknown functions",function(){it("are not allowed",function(){expect(function(){e.datetimepicker("abcdef")}).toThrow()})});describe("date() function",function(){describe("typechecking",function(){it("accepts a null",function(){expect(function(){d.date(null)}).not.toThrow()});it("accepts a string",function(){expect(function(){d.date("2013/05/24")}).not.toThrow()});it("accepts a Date object",function(){expect(function(){d.date(new Date())}).not.toThrow()});it("accepts a Moment object",function(){expect(function(){d.date(moment())}).not.toThrow()});it("does not accept undefined",function(){expect(function(){d.date(undefined)}).toThrow()});it("does not accept a number",function(){expect(function(){d.date(0)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){d.date({})}).toThrow()});it("does not accept a boolean",function(){expect(function(){d.date(false)}).toThrow()})});describe("functionality",function(){it("has no date set upon construction",function(){expect(d.date()).toBe(null)});it("sets the date correctly",function(){var h=moment();d.date(h);expect(d.date().isSame(h)).toBe(true)})});describe("access",function(){it("gets date",function(){expect(e.datetimepicker("date")).toBe(null)});it("sets date",function(){var h=moment();expect(e.datetimepicker("date",h)).toBe(e);expect(e.datetimepicker("date").isSame(h)).toBe(true)})})});describe("format() function",function(){describe("typechecking",function(){it("accepts a false value",function(){expect(function(){d.format(false)}).not.toThrow()});it("accepts a string",function(){expect(function(){d.format("YYYY-MM-DD")}).not.toThrow()});it("does not accept undefined",function(){expect(function(){d.format(undefined)}).toThrow()});it("does not accept true",function(){expect(function(){d.format(true)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){d.format({})}).toThrow()})});describe("functionality",function(){it("returns no format before format is set",function(){expect(d.format()).toBe(false)});it("sets the format correctly",function(){var h="YYYY-MM-DD";d.format(h);expect(d.format()).toBe(h)})});describe("access",function(){it("gets format",function(){expect(e.datetimepicker("format")).toBe(false)});it("sets format",function(){var h="YYYY-MM-DD";expect(e.datetimepicker("format",h)).toBe(e);expect(e.datetimepicker("format")).toBe(h)})})});describe("destroy() function",function(){describe("existence",function(){it("is defined",function(){expect(d.destroy).toBeDefined()})});describe("access",function(){it("returns jQuery object",function(){expect(e.datetimepicker("destroy")).toBe(e)})})});describe("toggle() function",function(){describe("existence",function(){it("is defined",function(){expect(d.toggle).toBeDefined()})});describe("access",function(){it("returns jQuery object",function(){expect(e.datetimepicker("toggle")).toBe(e)})})});describe("show() function",function(){describe("existence",function(){it("is defined",function(){expect(d.show).toBeDefined()})});describe("functionality",function(){it("emits a show event when called while widget is hidden",function(){d.show();expect(b).toHaveBeenCalled()});it("does not emit a show event when called and widget is already showing",function(){d.hide();d.show();b.calls.reset();d.show();expect(b).not.toHaveBeenCalled()});it("calls the classify event for each day that is shown",function(){d.show();expect(c.calls.count()).toEqual(42)});it("actually shows the widget",function(){d.show();expect($(document).find("body").find(".bootstrap-datetimepicker-widget").length).toEqual(1)});it("applies the styles appended in the classify event handler",function(){var h=function(i){if(i.date.get("weekday")===4){i.classNames.push("humpday")}i.classNames.push("injected")};$(document).find("body").on("dp.classify",h);d.show();$(document).find("body").off("dp.classify",h);expect($(document).find("body").find(".bootstrap-datetimepicker-widget td.day.injected").length).toEqual(42);expect($(document).find("body").find(".bootstrap-datetimepicker-widget td.day.humpday").length).toEqual(6)})});describe("access",function(){it("returns jQuery object",function(){expect(e.datetimepicker("show")).toBe(e)})})});describe("hide() function",function(){describe("existence",function(){it("is defined",function(){expect(d.hide).toBeDefined()})});describe("functionality",function(){it("emits a hide event when called while widget is shown",function(){d.show();d.hide();expect(a).toHaveBeenCalled()});it("does not emit a hide event when called while widget is hidden",function(){d.hide();expect(a).not.toHaveBeenCalled()});it("actually hides the widget",function(){d.show();d.hide();expect($(document).find("body").find(".bootstrap-datetimepicker-widget").length).toEqual(0)})});describe("access",function(){it("returns jQuery object",function(){expect(e.datetimepicker("hide")).toBe(e)})})});describe("disable() function",function(){describe("existence",function(){it("is defined",function(){expect(d.disable).toBeDefined()})});describe("access",function(){it("returns jQuery object",function(){expect(e.datetimepicker("disable")).toBe(e)})})});describe("enable() function",function(){describe("existence",function(){it("is defined",function(){expect(d.enable).toBeDefined()})});describe("access",function(){it("returns jQuery object",function(){expect(e.datetimepicker("enable")).toBe(e)})})});describe("options() function",function(){describe("existence",function(){it("is defined",function(){expect(d.options).toBeDefined()})});describe("access",function(){it("gets options",function(){expect(e.datetimepicker("options")).toEqual(e.datetimepicker.defaults)});it("sets options",function(){var h={locale:"fr"};expect(e.datetimepicker("options",h)).toBe(e);expect(e.datetimepicker("options")).toEqual($.extend(true,{},e.datetimepicker.defaults,h))})})});describe("disabledDates() function",function(){describe("existence",function(){it("is defined",function(){expect(d.disabledDates).toBeDefined()})});describe("access",function(){it("gets disabled dates",function(){expect(e.datetimepicker("disabledDates")).toBe(false)});it("sets disabled dates",function(){var h=[moment()];expect(e.datetimepicker("disabledDates",h)).toBe(e);expect(e.datetimepicker("disabledDates")).not.toBe(false)})})});describe("enabledDates() function",function(){describe("existence",function(){it("is defined",function(){expect(d.enabledDates).toBeDefined()})});describe("access",function(){it("gets enabled dates",function(){expect(e.datetimepicker("enabledDates")).toBe(false)});it("sets enabled dates",function(){var h=[moment()];expect(e.datetimepicker("enabledDates",h)).toBe(e);expect(e.datetimepicker("enabledDates")).not.toBe(false)})})});describe("daysOfWeekDisabled() function",function(){describe("existence",function(){it("is defined",function(){expect(d.daysOfWeekDisabled).toBeDefined()})});describe("access",function(){xit("gets days of week disabled",function(){expect(e.datetimepicker("daysOfWeekDisabled")).toEqual([])});it("sets days of week disabled",function(){var h=[0];expect(e.datetimepicker("daysOfWeekDisabled",h)).toBe(e);expect(e.datetimepicker("daysOfWeekDisabled")).toEqual(h)})})});describe("maxDate() function",function(){describe("existence",function(){it("is defined",function(){expect(d.maxDate).toBeDefined()})});describe("access",function(){it("gets max date",function(){expect(e.datetimepicker("maxDate")).toBe(false)});it("sets max date",function(){var h=moment();expect(e.datetimepicker("maxDate",h)).toBe(e);expect(e.datetimepicker("maxDate").isSame(h)).toBe(true)})})});describe("minDate() function",function(){describe("existence",function(){it("is defined",function(){expect(d.minDate).toBeDefined()})});describe("access",function(){it("gets min date",function(){expect(e.datetimepicker("minDate")).toBe(false)});it("sets min date",function(){var h=moment();expect(e.datetimepicker("minDate",h)).toBe(e);expect(e.datetimepicker("minDate").isSame(h)).toBe(true)})})});describe("defaultDate() function",function(){describe("existence",function(){it("is defined",function(){expect(d.defaultDate).toBeDefined()})});describe("functionality",function(){it("returns no defaultDate before defaultDate is set",function(){expect(d.defaultDate()).toBe(false)});it("sets the defaultDate correctly",function(){var h=moment();d.defaultDate(h);expect(d.defaultDate().isSame(h)).toBe(true);expect(d.date().isSame(h)).toBe(true)});it("triggers a change event upon setting a default date and input field is empty",function(){d.date(null);d.defaultDate(moment());expect(f).toHaveBeenCalled()});it("does not override input value if it already has one",function(){var h=moment();d.date(h);d.defaultDate(moment().year(2000));expect(d.date().isSame(h)).toBe(true)})});describe("access",function(){it("gets default date",function(){expect(e.datetimepicker("defaultDate")).toBe(false)});it("sets default date",function(){var h=moment();expect(e.datetimepicker("defaultDate",h)).toBe(e);expect(e.datetimepicker("defaultDate").isSame(h)).toBe(true)})})});describe("locale() function",function(){describe("functionality",function(){it("it has the same locale as the global moment locale with default options",function(){expect(d.locale()).toBe(moment.locale())});it("it switches to a selected locale without affecting global moment locale",function(){d.locale("el");d.date(moment());expect(d.locale()).toBe("el");expect(d.date().locale()).toBe("el");expect(moment.locale()).toBe("en")})});describe("access",function(){it("gets locale",function(){expect(e.datetimepicker("locale")).toBe(moment.locale())});it("sets locale",function(){var h="fr";expect(e.datetimepicker("locale",h)).toBe(e);expect(e.datetimepicker("locale")).toBe(h)})})});describe("useCurrent() function",function(){describe("existence",function(){it("is defined",function(){expect(d.useCurrent).toBeDefined()})});describe("check type and parameter validity",function(){it("accepts either a boolean value or string",function(){var h=["year","month","day","hour","minute"];expect(function(){d.useCurrent(false)}).not.toThrow();expect(function(){d.useCurrent(true)}).not.toThrow();h.forEach(function(i){expect(function(){d.useCurrent(i)}).not.toThrow()});expect(function(){d.useCurrent("test")}).toThrow();expect(function(){d.useCurrent({})}).toThrow()})});describe("functionality",function(){it("triggers a change event upon show() and input field is empty",function(){d.useCurrent(true);d.show();expect(f).toHaveBeenCalled()})});describe("access",function(){it("gets use current",function(){expect(e.datetimepicker("useCurrent")).toBe(true)});it("sets use current",function(){var h=false;expect(e.datetimepicker("useCurrent",h)).toBe(e);expect(e.datetimepicker("useCurrent")).toBe(h)})})});describe("ignoreReadonly() function",function(){describe("existence",function(){it("is defined",function(){expect(d.ignoreReadonly).toBeDefined()})});describe("access",function(){it("gets ignore readonly",function(){expect(e.datetimepicker("ignoreReadonly")).toBe(false)});it("sets ignore readonly",function(){var h=true;expect(e.datetimepicker("ignoreReadonly",h)).toBe(e);expect(e.datetimepicker("ignoreReadonly")).toBe(h)})})});describe("stepping() function",function(){describe("existence",function(){it("is defined",function(){expect(d.stepping).toBeDefined()})});describe("access",function(){it("gets stepping",function(){expect(e.datetimepicker("stepping")).toBe(1)});it("sets stepping",function(){var h=2;expect(e.datetimepicker("stepping",h)).toBe(e);expect(e.datetimepicker("stepping")).toBe(h)})})});describe("collapse() function",function(){describe("existence",function(){it("is defined",function(){expect(d.collapse).toBeDefined()})});describe("access",function(){it("gets collapse",function(){expect(e.datetimepicker("collapse")).toBe(true)});it("sets collapse",function(){var h=false;expect(e.datetimepicker("collapse",h)).toBe(e);expect(e.datetimepicker("collapse")).toBe(h)})})});describe("icons() function",function(){describe("existence",function(){it("is defined",function(){expect(d.icons).toBeDefined()})});describe("access",function(){it("gets icons",function(){expect(e.datetimepicker("icons")).toEqual(e.datetimepicker.defaults.icons)});it("sets icons",function(){var h={time:"fa fa-time"};expect(e.datetimepicker("icons",h)).toBe(e);expect(e.datetimepicker("icons")).toEqual($.extend(true,{},e.datetimepicker.defaults.icons,h))})})});describe("useStrict() function",function(){describe("existence",function(){it("is defined",function(){expect(d.useStrict).toBeDefined()})});describe("access",function(){it("gets use strict",function(){expect(e.datetimepicker("useStrict")).toBe(false)});it("sets use strict",function(){var h=true;expect(e.datetimepicker("useStrict",h)).toBe(e);expect(e.datetimepicker("useStrict")).toBe(h)})})});describe("sideBySide() function",function(){describe("existence",function(){it("is defined",function(){expect(d.sideBySide).toBeDefined()})});describe("access",function(){it("gets side-by-side",function(){expect(e.datetimepicker("sideBySide")).toBe(false)});it("sets side-by-side",function(){var h=true;expect(e.datetimepicker("sideBySide",h)).toBe(e);expect(e.datetimepicker("sideBySide")).toBe(h)})})});describe("viewMode() function",function(){describe("existence",function(){it("is defined",function(){expect(d.viewMode).toBeDefined()})});describe("access",function(){it("gets view mode",function(){expect(e.datetimepicker("viewMode")).toBe("days")});it("sets view mode",function(){var h="years";expect(e.datetimepicker("viewMode",h)).toBe(e);expect(e.datetimepicker("viewMode")).toBe(h)})})});describe("widgetPositioning() function",function(){describe("existence",function(){it("is defined",function(){expect(d.widgetPositioning).toBeDefined()})});describe("access",function(){it("gets widget positioning",function(){expect(e.datetimepicker("widgetPositioning")).toEqual(e.datetimepicker.defaults.widgetPositioning)});it("sets widget positioning",function(){var h={horizontal:"left"};expect(e.datetimepicker("widgetPositioning",h)).toBe(e);expect(e.datetimepicker("widgetPositioning")).toEqual($.extend(true,{},e.datetimepicker.defaults.widgetPositioning,h))})})});describe("calendarWeeks() function",function(){describe("existence",function(){it("is defined",function(){expect(d.calendarWeeks).toBeDefined()})});describe("access",function(){it("gets calendar weeks",function(){expect(e.datetimepicker("calendarWeeks")).toBe(false)});it("sets calendar weeks",function(){var h=true;expect(e.datetimepicker("calendarWeeks",h)).toBe(e);expect(e.datetimepicker("calendarWeeks")).toBe(h)})})});describe("showTodayButton() function",function(){describe("existence",function(){it("is defined",function(){expect(d.showTodayButton).toBeDefined()})});describe("access",function(){it("gets show today button",function(){expect(e.datetimepicker("showTodayButton")).toBe(false)});it("sets show today button",function(){var h=true;expect(e.datetimepicker("showTodayButton",h)).toBe(e);expect(e.datetimepicker("showTodayButton")).toBe(h)})})});describe("showClear() function",function(){describe("existence",function(){it("is defined",function(){expect(d.showClear).toBeDefined()})});describe("access",function(){it("gets show clear",function(){expect(e.datetimepicker("showClear")).toBe(false)});it("sets show clear",function(){var h=true;expect(e.datetimepicker("showClear",h)).toBe(e);expect(e.datetimepicker("showClear")).toBe(h)})})});describe("dayViewHeaderFormat() function",function(){describe("typechecking",function(){it("does not accept a false value",function(){expect(function(){d.dayViewHeaderFormat(false)}).toThrow()});it("accepts a string",function(){expect(function(){d.dayViewHeaderFormat("YYYY-MM-DD")}).not.toThrow()});it("does not accept undefined",function(){expect(function(){d.dayViewHeaderFormat(undefined)}).toThrow()});it("does not accept true",function(){expect(function(){d.dayViewHeaderFormat(true)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){d.dayViewHeaderFormat({})}).toThrow()})});describe("functionality",function(){it("expects dayViewHeaderFormat to be default of MMMM YYYY",function(){expect(d.dayViewHeaderFormat()).toBe("MMMM YYYY")});it("sets the dayViewHeaderFormat correctly",function(){d.dayViewHeaderFormat("MM YY");expect(d.dayViewHeaderFormat()).toBe("MM YY")})});describe("access",function(){it("gets day view header format",function(){expect(e.datetimepicker("dayViewHeaderFormat")).toBe("MMMM YYYY")});it("sets day view header format",function(){var h="MM YY";expect(e.datetimepicker("dayViewHeaderFormat",h)).toBe(e);expect(e.datetimepicker("dayViewHeaderFormat")).toBe(h)})})});describe("extraFormats() function",function(){describe("typechecking",function(){it("accepts a false value",function(){expect(function(){d.extraFormats(false)}).not.toThrow()});it("does not accept a string",function(){expect(function(){d.extraFormats("YYYY-MM-DD")}).toThrow()});it("does not accept undefined",function(){expect(function(){d.extraFormats(undefined)}).toThrow()});it("does not accept true",function(){expect(function(){d.extraFormats(true)}).toThrow()});it("accepts an Array",function(){expect(function(){d.extraFormats(["YYYY-MM-DD"])}).not.toThrow()})});describe("functionality",function(){it("returns no extraFormats before extraFormats is set",function(){expect(d.extraFormats()).toBe(false)});it("sets the extraFormats correctly",function(){d.extraFormats(["YYYY-MM-DD"]);expect(d.extraFormats()[0]).toBe("YYYY-MM-DD")})});describe("access",function(){it("gets extra formats",function(){expect(e.datetimepicker("extraFormats")).toBe(false)});it("sets extra formats",function(){var h=["YYYY-MM-DD"];expect(e.datetimepicker("extraFormats",h)).toBe(e);expect(e.datetimepicker("extraFormats")).toEqual(h)})})});describe("toolbarPlacement() function",function(){describe("existence",function(){it("is defined",function(){expect(d.toolbarPlacement).toBeDefined()})});describe("check type and parameter validity",function(){it("does not accept a false value",function(){expect(function(){d.dayViewHeaderFormat(false)}).toThrow()});it("does not accept a false value",function(){expect(function(){d.dayViewHeaderFormat(false)}).toThrow()});it("accepts a string",function(){var h=["default","top","bottom"];h.forEach(function(i){expect(function(){d.toolbarPlacement(i)}).not.toThrow()});expect(function(){d.toolbarPlacement("test")}).toThrow();expect(function(){d.toolbarPlacement({})}).toThrow()})});describe("access",function(){it("gets toolbar placement",function(){expect(e.datetimepicker("toolbarPlacement")).toBe("default")});it("sets toolbar placement",function(){var h="top";expect(e.datetimepicker("toolbarPlacement",h)).toBe(e);expect(e.datetimepicker("toolbarPlacement")).toBe(h)})})});describe("widgetParent() function",function(){describe("typechecking",function(){it("accepts a null",function(){expect(function(){d.widgetParent(null)}).not.toThrow()});it("accepts a string",function(){expect(function(){d.widgetParent("testDiv")}).not.toThrow()});it("accepts a jquery object",function(){expect(function(){d.widgetParent($("#testDiv"))}).not.toThrow()});it("does not accept undefined",function(){expect(function(){d.widgetParent(undefined)}).toThrow()});it("does not accept a number",function(){expect(function(){d.widgetParent(0)}).toThrow()});it("does not accept a generic Object",function(){expect(function(){d.widgetParent({})}).toThrow()});it("does not accept a boolean",function(){expect(function(){d.widgetParent(false)}).toThrow()})});describe("access",function(){it("gets widget parent",function(){expect(e.datetimepicker("widgetParent")).toBe(null)});it("sets widget parent",function(){expect(e.datetimepicker("widgetParent","testDiv")).toBe(e);expect(e.datetimepicker("widgetParent")).not.toBe(null)})})});describe("keepOpen() function",function(){describe("existence",function(){it("is defined",function(){expect(d.keepOpen).toBeDefined()})});describe("access",function(){it("gets keep open",function(){expect(e.datetimepicker("keepOpen")).toBe(false)});it("sets keep open",function(){var h=true;expect(e.datetimepicker("keepOpen",h)).toBe(e);expect(e.datetimepicker("keepOpen")).toBe(h)})})});describe("inline() function",function(){describe("existence",function(){it("is defined",function(){expect(d.inline).toBeDefined()})});describe("access",function(){it("gets inline",function(){expect(e.datetimepicker("inline")).toBe(false)});it("sets inline",function(){var h=true;expect(e.datetimepicker("inline",h)).toBe(e);expect(e.datetimepicker("inline")).toBe(h)})})});describe("clear() function",function(){describe("existence",function(){it("is defined",function(){expect(d.clear).toBeDefined()})});describe("access",function(){it("returns jQuery object",function(){expect(e.datetimepicker("clear")).toBe(e)})})});describe("keyBinds() function",function(){describe("existence",function(){it("is defined",function(){expect(d.keyBinds).toBeDefined()})});describe("access",function(){it("gets key binds",function(){expect(e.datetimepicker("keyBinds")).toEqual(e.datetimepicker.defaults.keyBinds)});it("sets key binds",function(){var h={up:function(){}};expect(e.datetimepicker("keyBinds",h)).toBe(e);expect(e.datetimepicker("keyBinds")).toEqual(h)})})});describe("parseInputDate() function",function(){describe("existence",function(){it("is defined",function(){expect(d.parseInputDate).toBeDefined()})});describe("access",function(){it("gets parse input date",function(){expect(e.datetimepicker("parseInputDate")).toBe(undefined)});it("sets parse input date",function(){var h=function(){};expect(e.datetimepicker("parseInputDate",h)).toBe(e);expect(e.datetimepicker("parseInputDate")).toBe(h)})})});describe("Time zone tests",function(){function h(j,i){it("should not change the value that was set when using format "+j,function(){var l=d.format(),m=d.timeZone(),k=moment().startOf("second");d.timeZone(i);d.format(j);d.date(k);f.calls.reset();d.show();d.hide();expect(f).not.toHaveBeenCalled();expect(d.date().format()).toEqual(k.tz(i).format());d.format(l);d.timeZone(m)})}h("YYYY-MM-DD HH:mm:ss Z","UTC");h("YYYY-MM-DD HH:mm:ss","UTC");h("YYYY-MM-DD HH:mm:ss Z","America/New_York");h("YYYY-MM-DD HH:mm:ss","America/New_York")})});